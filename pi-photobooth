#!/usr/bin/env python3
"""Program to turn a raspberry pi with a camera and printer into a photobooth, with optional captions.

## Prequestities
    * sudo apt install python3-picamera
    * sudo pip3 install rpi-ws281x

There are environment variables you can set to control the LED strip:
    * LED_COUNT=144
    * LED_PIN=10

## Example shell command

    LED_COUNT=12 LED_PIN=23 pi-photobooth

## Keyboard Controls

While the program is running users can use the keyboard to type captions that will appear over the image. These captions will also appear on the printed image. Besides entering text for the caption the following hot-keys have been mapped:

    * F8, Ctrl-U: Clear the caption
    * Up/Down: Adjust contrast
    * Left/Right: Adjust brightness
    * F1/F2: Adjust sharpnesss
    * F3/F4: Adjust the grey level of the caption
    * F5: Cycle through image effects
    * F10, Page up, Page down: Print the current image on screen

## Printing

Photos will be printed using `lp -o fit-to-page`, which should work fine for most setups as long as CUPS knows how big the paper in your printer is. If you have more than one printer ensure that the default printer is the one you want to print to.

Printed images will be saved in the current working directory as `webcam-YYYMMDDHHMMSSS.jpg` and will not be cleaned up. If you plan to run this for an extended period you will need to find a way to clean those up periodically.

## Errata

The RGB strip support is not currently working.
"""
import curses
import os
import subprocess
import threading
import time

import picamera
import rpi_ws281x

# LED strip configuration:
CURRENT_ANIMATION = 'off'
LED_COUNT = int(os.environ.get('LED_COUNT', 144))
LED_PIN = int(os.environ.get('LED_PIN', 10))

# Keys
CTRL_A = 1
ENTER = 10
CTRL_U = 21
DOWN = 258
UP = 259
LEFT = 260
RIGHT = 261
BACKSPACE = 263
F1 = 265
F2 = 266
F3 = 267
F4 = 268
F5 = 269
F6 = 270
F7 = 271
F8 = 272
F9 = 273
F10 = 274
F11 = 275
F12 = 276
PAGEUP = 339
PAGEDOWN = 338

# Colors
BLACK = picamera.Color('black')
WHITE = picamera.Color('white')
GREY_STEP = picamera.Lightness(0.1)


class Annotation(object):
    """Store our own represantation of the annotation because pycamera is a little dumb.
    """
    def __init__(self, value, camera):
        self.value = value if value else ''
        self.camera = camera

    def refresh(self):
        """Update the annotation.
        """
        annotation = self.value
        while annotation.endswith('\n'):
            annotation = annotation[:-1]
        self.camera.annotate_text = annotation

    def add(self, new_text):
        """Add text to the annotation.
        """
        self.value += new_text
        self.refresh()

    def backspace(self):
        """Removes the last character of the annotation.
        """
        if self.value:
            self.value = self.value[:-1]
        self.refresh()

    def clear(self):
        """Clear the annotation of contents.
        """
        self.value = ''
        self.refresh()


def solid_color_animation(strip, color):
    """Make all the LEDs a single color.
    """
    for led in range(strip.numPixels()):
        strip.setPixelColor(led, color)
    strip.show()
    time.sleep(.02)


def wheel(pos):
    """Generate rainbow colors across 0-255 positions."""
    if pos < 85:
        return rpi_ws281x.Color(pos * 3, 255 - pos * 3, 0)
    elif pos < 170:
        pos -= 85
        return rpi_ws281x.Color(255 - pos * 3, 0, pos * 3)
    else:
        pos -= 170
        return rpi_ws281x.Color(0, pos * 3, 255 - pos * 3)


def rainbow_animation(strip, wait_ms=20, iterations=1):
    """Draw rainbow that fades across all pixels at once.
    """
    for j in range(256 * iterations):
        for i in range(strip.numPixels()):
            if CURRENT_ANIMATION != 'rainbow':
                break
            strip.setPixelColor(i, wheel((i + j) & 255))
        strip.show()
        time.sleep(wait_ms / 1000.0)


def led_animations():
    """Thread to control the ws2812 strip.
    """
    strip = rpi_ws281x.PixelStrip(LED_COUNT, LED_PIN)
    strip.begin()

    while True:
        if CURRENT_ANIMATION == 'rainbow':
            rainbow_animation(strip)
        elif CURRENT_ANIMATION == 'red':
            solid_color_animation(strip, rpi_ws281x.Color(255, 0, 0))
        elif CURRENT_ANIMATION == 'green':
            solid_color_animation(strip, rpi_ws281x.Color(0, 255, 0))
        elif CURRENT_ANIMATION == 'blue':
            solid_color_animation(strip, rpi_ws281x.Color(0, 0, 255))
        elif CURRENT_ANIMATION == 'off':
            solid_color_animation(strip, rpi_ws281x.Color(0, 0, 0))


def main(stdscr):
    """Setup and control the camera. Allow users to caption and take photos.
    """
    global CURRENT_ANIMATION

    # Camera setup
    camera = picamera.PiCamera()
    camera.rotation = 90
    camera.hflip = True
    camera.annotate_foreground = picamera.Color('white')
    camera.annotate_background = picamera.Color('black')
    camera.annotate_text_size = 52
    camera.image_effect = 'denoise'
    camera.saturation = -100
    camera.start_preview()

    # Keyboard input setup
    curses.use_default_colors()
    stdscr.scrollok(True)
    annotation = Annotation('', camera)

    # Read keys for user interaction
    while True:
        char = stdscr.getch()
        if 31 < char < 127:
            annotation.add(chr(char))
        elif char == ENTER:
            annotation.add('\n')
        elif char == BACKSPACE:
            annotation.backspace()
        elif char == UP:
            if camera.contrast < 100:
                camera.contrast += 5
        elif char == DOWN:
            if camera.contrast > -100:
                camera.contrast -= 5
        elif char == RIGHT:
            if camera.brightness < 100:
                camera.brightness += 2
        elif char == LEFT:
            if camera.brightness > 0:
                camera.brightness -= 2
        elif char == F1:
            if camera.sharpness > -100:
                camera.sharpness -= 2
        elif char == F2:
            if camera.sharpness < 100:
                camera.sharpness += 2
        elif char == F3:
            if camera.annotate_foreground != WHITE:
                camera.annotate_foreground = camera.annotate_foreground + GREY_STEP
                camera.annotate_background = camera.annotate_background - GREY_STEP
        elif char == F4:
            if camera.annotate_foreground != BLACK:
                camera.annotate_foreground = camera.annotate_foreground - GREY_STEP
                camera.annotate_background = camera.annotate_background + GREY_STEP
        elif char == F5:
            if camera.image_effect == 'denoise':
                camera.image_effect = 'sketch'
            elif camera.image_effect == 'sketch':
                camera.image_effect = 'emboss'
            elif camera.image_effect == 'emboss':
                camera.image_effect = 'posterise'
            else:
                camera.image_effect = 'denoise'
        elif char in [CTRL_U, F8]:
            annotation.clear()
        elif char in [F10, PAGEUP, PAGEDOWN]:
            # Take a picture
            filename = 'webcam-%s.jpg' % time.strftime('%Y%m%d%H%M%S')
            camera.capture(filename)
            subprocess.run(['lp', '-o', 'fit-to-page', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE)


if __name__ == '__main__':
    #rgb_thread = threading.Thread(target=led_animations, name='Thread-LED', daemon=True)
    #rgb_thread.start()
    curses.wrapper(main)
